//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT Â·__validate_ascii_fast_avx2(SB), $0-24

	MOVQ buf+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ res+16(FP), DX

	WORD $0xc031     // xor    eax, eax
	LONG $0x20fe8348 // cmp    rsi, 32
	JB   LBB0_1
	LONG $0xe05e8d48 // lea    rbx, [rsi - 32]
	LONG $0xc0eff9c5 // vpxor    xmm0, xmm0, xmm0
	WORD $0xc931     // xor    ecx, ecx

LBB0_3:
	LONG $0x04ebfdc5; BYTE $0x0f // vpor    ymm0, ymm0, yword [rdi + rcx]
	LONG $0x20c18348             // add    rcx, 32
	WORD $0x3948; BYTE $0xd9     // cmp    rcx, rbx
	JBE  LBB0_3
	LONG $0xc0d77dc5             // vpmovmskb    r8d, ymm0
	WORD $0x3948; BYTE $0xf1     // cmp    rcx, rsi
	JB   LBB0_5
	JMP  LBB0_17

LBB0_1:
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc931             // xor    ecx, ecx
	LONG $0xc0d77dc5         // vpmovmskb    r8d, ymm0
	WORD $0x3948; BYTE $0xf1 // cmp    rcx, rsi
	JAE  LBB0_17

LBB0_5:
	WORD $0x8949; BYTE $0xf2     // mov    r10, rsi
	WORD $0x2949; BYTE $0xca     // sub    r10, rcx
	WORD $0xc031                 // xor    eax, eax
	LONG $0x20fa8349             // cmp    r10, 32
	JB   LBB0_14
	WORD $0x894d; BYTE $0xd1     // mov    r9, r10
	LONG $0xe0e18349             // and    r9, -32
	LONG $0xe0598d49             // lea    rbx, [r9 - 32]
	WORD $0x8948; BYTE $0xd8     // mov    rax, rbx
	LONG $0x05e8c148             // shr    rax, 5
	LONG $0x01588d44             // lea    r11d, [rax + 1]
	LONG $0x01e38341             // and    r11d, 1
	WORD $0x8548; BYTE $0xdb     // test    rbx, rbx
	JE   LBB0_7
	LONG $0x0f5c8d48; BYTE $0x38 // lea    rbx, [rdi + rcx + 56]
	LONG $0xff738d4d             // lea    r14, [r11 - 1]
	WORD $0x2949; BYTE $0xc6     // sub    r14, rax
	LONG $0xc0eff9c5             // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031                 // xor    eax, eax
	LONG $0xc9eff1c5             // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5             // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5             // vpxor    xmm3, xmm3, xmm3

LBB0_9:
	LONG $0x217de2c4; WORD $0x0364; BYTE $0xc8 // vpmovsxbd    ymm4, qword [rbx + rax - 56]
	LONG $0xc4ebfdc5                           // vpor    ymm0, ymm0, ymm4
	LONG $0x217de2c4; WORD $0x0364; BYTE $0xd0 // vpmovsxbd    ymm4, qword [rbx + rax - 48]
	LONG $0xccebf5c5                           // vpor    ymm1, ymm1, ymm4
	LONG $0x217de2c4; WORD $0x0364; BYTE $0xd8 // vpmovsxbd    ymm4, qword [rbx + rax - 40]
	LONG $0xd4ebedc5                           // vpor    ymm2, ymm2, ymm4
	LONG $0x217de2c4; WORD $0x0364; BYTE $0xe0 // vpmovsxbd    ymm4, qword [rbx + rax - 32]
	LONG $0xdcebe5c5                           // vpor    ymm3, ymm3, ymm4
	LONG $0x217de2c4; WORD $0x0364; BYTE $0xe8 // vpmovsxbd    ymm4, qword [rbx + rax - 24]
	LONG $0xc4ebfdc5                           // vpor    ymm0, ymm0, ymm4
	LONG $0x217de2c4; WORD $0x0364; BYTE $0xf0 // vpmovsxbd    ymm4, qword [rbx + rax - 16]
	LONG $0xccebf5c5                           // vpor    ymm1, ymm1, ymm4
	LONG $0x217de2c4; WORD $0x0364; BYTE $0xf8 // vpmovsxbd    ymm4, qword [rbx + rax - 8]
	LONG $0xd4ebedc5                           // vpor    ymm2, ymm2, ymm4
	LONG $0x217de2c4; WORD $0x0324             // vpmovsxbd    ymm4, qword [rbx + rax]
	LONG $0xdcebe5c5                           // vpor    ymm3, ymm3, ymm4
	LONG $0x40c08348                           // add    rax, 64
	LONG $0x02c68349                           // add    r14, 2
	JNE  LBB0_9
	WORD $0x854d; BYTE $0xdb                   // test    r11, r11
	JE   LBB0_12

LBB0_11:
	WORD $0x0148; BYTE $0xc8                   // add    rax, rcx
	LONG $0x217de2c4; WORD $0x0764; BYTE $0x18 // vpmovsxbd    ymm4, qword [rdi + rax + 24]
	LONG $0xdcebe5c5                           // vpor    ymm3, ymm3, ymm4
	LONG $0x217de2c4; WORD $0x0764; BYTE $0x10 // vpmovsxbd    ymm4, qword [rdi + rax + 16]
	LONG $0xd4ebedc5                           // vpor    ymm2, ymm2, ymm4
	LONG $0x217de2c4; WORD $0x0764; BYTE $0x08 // vpmovsxbd    ymm4, qword [rdi + rax + 8]
	LONG $0xccebf5c5                           // vpor    ymm1, ymm1, ymm4
	LONG $0x217de2c4; WORD $0x0724             // vpmovsxbd    ymm4, qword [rdi + rax]
	LONG $0xc4ebfdc5                           // vpor    ymm0, ymm0, ymm4

LBB0_12:
	LONG $0xcbebf5c5               // vpor    ymm1, ymm1, ymm3
	LONG $0xc2ebfdc5               // vpor    ymm0, ymm0, ymm2
	LONG $0xc1ebfdc5               // vpor    ymm0, ymm0, ymm1
	LONG $0x397de3c4; WORD $0x01c1 // vextracti128    xmm1, ymm0, 1
	LONG $0xc1ebfdc5               // vpor    ymm0, ymm0, ymm1
	LONG $0xc870f9c5; BYTE $0x4e   // vpshufd    xmm1, xmm0, 78
	LONG $0xc1ebfdc5               // vpor    ymm0, ymm0, ymm1
	LONG $0xc870f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm0, 229
	LONG $0xc1ebfdc5               // vpor    ymm0, ymm0, ymm1
	LONG $0xc07ef9c5               // vmovd    eax, xmm0
	WORD $0x394d; BYTE $0xca       // cmp    r10, r9
	JE   LBB0_16
	WORD $0x014c; BYTE $0xc9       // add    rcx, r9

LBB0_14:
	WORD $0x2948; BYTE $0xce // sub    rsi, rcx
	WORD $0x0148; BYTE $0xcf // add    rdi, rcx

LBB0_15:
	WORD $0xbe0f; BYTE $0x0f // movsx    ecx, byte [rdi]
	WORD $0xc809             // or    eax, ecx
	WORD $0xff48; BYTE $0xc7 // inc    rdi
	WORD $0xff48; BYTE $0xce // dec    rsi
	JNE  LBB0_15

LBB0_16:
	LONG $0x00008025; BYTE $0x00 // and    eax, 128

LBB0_17:
	WORD $0xc931             // xor    ecx, ecx
	WORD $0x0944; BYTE $0xc0 // or    eax, r8d
	WORD $0x940f; BYTE $0xd1 // sete    cl
	WORD $0x8948; BYTE $0x0a // mov    qword [rdx], rcx
	VZEROUPPER
	RET

LBB0_7:
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	WORD $0xc031             // xor    eax, eax
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3
	WORD $0x854d; BYTE $0xdb // test    r11, r11
	JNE  LBB0_11
	JMP  LBB0_12
