//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x0f0f0f0f0f0f0f0f
DATA LCDATA1<>+0x008(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x010(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x018(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x020(SB)/8, $0xf4f4f4f4f4f4f4f4
DATA LCDATA1<>+0x028(SB)/8, $0xf4f4f4f4f4f4f4f4
DATA LCDATA1<>+0x030(SB)/8, $0xf4f4f4f4f4f4f4f4
DATA LCDATA1<>+0x038(SB)/8, $0xf4f4f4f4f4f4f4f4
DATA LCDATA1<>+0x040(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x048(SB)/8, $0x0403020200000000
DATA LCDATA1<>+0x050(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x058(SB)/8, $0x0403020200000000
DATA LCDATA1<>+0x060(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x068(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x070(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x078(SB)/8, $0x0101010101010101
DATA LCDATA1<>+0x080(SB)/8, $0x0202020202020202
DATA LCDATA1<>+0x088(SB)/8, $0x0202020202020202
DATA LCDATA1<>+0x090(SB)/8, $0x0202020202020202
DATA LCDATA1<>+0x098(SB)/8, $0x0202020202020202
DATA LCDATA1<>+0x0a0(SB)/8, $0xedededededededed
DATA LCDATA1<>+0x0a8(SB)/8, $0xedededededededed
DATA LCDATA1<>+0x0b0(SB)/8, $0xedededededededed
DATA LCDATA1<>+0x0b8(SB)/8, $0xedededededededed
DATA LCDATA1<>+0x0c0(SB)/8, $0x9f9f9f9f9f9f9f9f
DATA LCDATA1<>+0x0c8(SB)/8, $0x9f9f9f9f9f9f9f9f
DATA LCDATA1<>+0x0d0(SB)/8, $0x9f9f9f9f9f9f9f9f
DATA LCDATA1<>+0x0d8(SB)/8, $0x9f9f9f9f9f9f9f9f
DATA LCDATA1<>+0x0e0(SB)/8, $0x8f8f8f8f8f8f8f8f
DATA LCDATA1<>+0x0e8(SB)/8, $0x8f8f8f8f8f8f8f8f
DATA LCDATA1<>+0x0f0(SB)/8, $0x8f8f8f8f8f8f8f8f
DATA LCDATA1<>+0x0f8(SB)/8, $0x8f8f8f8f8f8f8f8f
DATA LCDATA1<>+0x100(SB)/8, $0x8080808080808080
DATA LCDATA1<>+0x108(SB)/8, $0xf1e180c280808080
DATA LCDATA1<>+0x110(SB)/8, $0x8080808080808080
DATA LCDATA1<>+0x118(SB)/8, $0xf1e180c280808080
DATA LCDATA1<>+0x120(SB)/8, $0x8080808080808080
DATA LCDATA1<>+0x128(SB)/8, $0x90a07f7f80808080
DATA LCDATA1<>+0x130(SB)/8, $0x8080808080808080
DATA LCDATA1<>+0x138(SB)/8, $0x90a07f7f80808080
DATA LCDATA1<>+0x140(SB)/8, $0x0909090909090909
DATA LCDATA1<>+0x148(SB)/8, $0x0909090909090909
DATA LCDATA1<>+0x150(SB)/8, $0x0909090909090909
DATA LCDATA1<>+0x158(SB)/8, $0x0109090909090909
GLOBL LCDATA1<>(SB), 8, $352

TEXT Â·__validate_utf8_fast_avx2(SB), $0-32

	MOVQ state+0(FP), DI
	MOVQ buf+8(FP), SI
	MOVQ len+16(FP), DX
	MOVQ res+24(FP), CX
	LEAQ LCDATA1<>(SB), BP

	LONG $0x20fa8348               // cmp    rdx, 32
	JB   LBB0_5
	LONG $0xe0428d4c               // lea    r8, [rdx - 32]
	LONG $0xdbefe1c5               // vpxor    xmm3, xmm3, xmm3
	WORD $0x3145; BYTE $0xe4       // xor    r12d, r12d
	LONG $0x597de2c4; WORD $0x0065 // vpbroadcastq    ymm4, qword 0[rbp] /* [rip + LCPI0_0] */
	LONG $0x6d6ffdc5; BYTE $0x20   // vmovdqa    ymm5, yword 32[rbp] /* [rip + LCPI0_1] */
	LONG $0x7d6ffdc5; BYTE $0x60   // vmovdqa    ymm7, yword 96[rbp] /* [rip + LCPI0_3] */
	QUAD $0x000000e09d6f7dc5       // vmovdqa    ymm11, yword 224[rbp] /* [rip + LCPI0_7] */
	QUAD $0x00000100a56f7dc5       // vmovdqa    ymm12, yword 256[rbp] /* [rip + LCPI0_8] */
	QUAD $0x00000120ad6f7dc5       // vmovdqa    ymm13, yword 288[rbp] /* [rip + LCPI0_9] */
	LONG $0xd2efe9c5               // vpxor    xmm2, xmm2, xmm2
	LONG $0xc0eff9c5               // vpxor    xmm0, xmm0, xmm0
	LONG $0xc9eff1c5               // vpxor    xmm1, xmm1, xmm1

LBB0_2:
	LONG $0xf16f7dc5               // vmovdqa    ymm14, ymm1
	LONG $0xf86f7dc5               // vmovdqa    ymm15, ymm0
	LONG $0x6f7ea1c4; WORD $0x260c // vmovdqu    ymm1, yword [rsi + r12]
	LONG $0xd171fdc5; BYTE $0x04   // vpsrlw    ymm0, ymm1, 4
	LONG $0xc4dbfdc5               // vpand    ymm0, ymm0, ymm4
	LONG $0xf5d8f5c5               // vpsubusb    ymm6, ymm1, ymm5
	LONG $0xdeebe5c5               // vpor    ymm3, ymm3, ymm6
	LONG $0x756ffdc5; BYTE $0x40   // vmovdqa    ymm6, yword 64[rbp] /* [rip + LCPI0_2] */
	LONG $0x004de2c4; BYTE $0xf0   // vpshufb    ymm6, ymm6, ymm0
	LONG $0x466d63c4; WORD $0x21c6 // vperm2i128    ymm8, ymm2, ymm6, 33
	LONG $0x0f4d43c4; WORD $0x0fc0 // vpalignr    ymm8, ymm6, ymm8, 15
	LONG $0xc7d83dc5               // vpsubusb    ymm8, ymm8, ymm7
	LONG $0xc6fc3dc5               // vpaddb    ymm8, ymm8, ymm6
	LONG $0x466dc3c4; WORD $0x21d0 // vperm2i128    ymm2, ymm2, ymm8, 33
	LONG $0x0f3de3c4; WORD $0x0ed2 // vpalignr    ymm2, ymm8, ymm2, 14
	QUAD $0x0000008095d8edc5       // vpsubusb    ymm2, ymm2, yword 128[rbp] /* [rip + LCPI0_4] */
	LONG $0xfc6dc1c4; BYTE $0xd0   // vpaddb    ymm2, ymm2, ymm8
	LONG $0xc6646dc5               // vpcmpgtb    ymm8, ymm2, ymm6
	LONG $0xf664c5c5               // vpcmpgtb    ymm6, ymm7, ymm6
	LONG $0xf6efbdc5               // vpxor    ymm6, ymm8, ymm6
	LONG $0x460d63c4; WORD $0x21c1 // vperm2i128    ymm8, ymm14, ymm1, 33
	LONG $0x0f7543c4; WORD $0x0fc0 // vpalignr    ymm8, ymm1, ymm8, 15
	QUAD $0x000000a0b5743dc5       // vpcmpeqb    ymm14, ymm8, yword 160[rbp] /* [rip + LCPI0_5] */
	LONG $0xcd743dc5               // vpcmpeqb    ymm9, ymm8, ymm5
	QUAD $0x000000c0956475c5       // vpcmpgtb    ymm10, ymm1, yword 192[rbp] /* [rip + LCPI0_6] */
	LONG $0xdb0d41c4; BYTE $0xd2   // vpand    ymm10, ymm14, ymm10
	LONG $0x647541c4; BYTE $0xf3   // vpcmpgtb    ymm14, ymm1, ymm11
	LONG $0xdb3541c4; BYTE $0xce   // vpand    ymm9, ymm9, ymm14
	LONG $0xeb3541c4; BYTE $0xca   // vpor    ymm9, ymm9, ymm10
	LONG $0xeb65c1c4; BYTE $0xd9   // vpor    ymm3, ymm3, ymm9
	LONG $0x460563c4; WORD $0x21c8 // vperm2i128    ymm9, ymm15, ymm0, 33
	LONG $0x0f7d43c4; WORD $0x0fc9 // vpalignr    ymm9, ymm0, ymm9, 15
	LONG $0x001d42c4; BYTE $0xd1   // vpshufb    ymm10, ymm12, ymm9
	LONG $0x642d41c4; BYTE $0xc0   // vpcmpgtb    ymm8, ymm10, ymm8
	LONG $0x001542c4; BYTE $0xc9   // vpshufb    ymm9, ymm13, ymm9
	LONG $0xc96435c5               // vpcmpgtb    ymm9, ymm9, ymm1
	LONG $0xdb3541c4; BYTE $0xc0   // vpand    ymm8, ymm9, ymm8
	LONG $0xeb65c1c4; BYTE $0xd8   // vpor    ymm3, ymm3, ymm8
	LONG $0xdbebcdc5               // vpor    ymm3, ymm6, ymm3
	LONG $0x20c48349               // add    r12, 32
	WORD $0x394d; BYTE $0xc4       // cmp    r12, r8
	JBE  LBB0_2
	LONG $0xe26ffdc5               // vmovdqa    ymm4, ymm2
	WORD $0x3949; BYTE $0xd4       // cmp    r12, rdx
	JB   LBB0_6

LBB0_4:
	QUAD $0x000001408564ddc5 // vpcmpgtb    ymm0, ymm4, yword 320[rbp] /* [rip + LCPI0_10] */
	LONG $0xc0ebe5c5         // vpor    ymm0, ymm3, ymm0
	JMP  LBB0_27

LBB0_5:
	LONG $0xc9eff1c5         // vpxor    xmm1, xmm1, xmm1
	WORD $0x3145; BYTE $0xe4 // xor    r12d, r12d
	LONG $0xc0eff9c5         // vpxor    xmm0, xmm0, xmm0
	LONG $0xe4efd9c5         // vpxor    xmm4, xmm4, xmm4
	LONG $0xd2efe9c5         // vpxor    xmm2, xmm2, xmm2
	LONG $0xdbefe1c5         // vpxor    xmm3, xmm3, xmm3
	WORD $0x3949; BYTE $0xd4 // cmp    r12, rdx
	JAE  LBB0_4

LBB0_6:
	LONG $0xe4efd9c5             // vpxor    xmm4, xmm4, xmm4
	LONG $0x277ffac5             // vmovdqu    oword [rdi], xmm4
	LONG $0x677ffac5; BYTE $0x10 // vmovdqu    oword [rdi + 16], xmm4
	WORD $0x8949; BYTE $0xd0     // mov    r8, rdx
	WORD $0x294d; BYTE $0xe0     // sub    r8, r12
	JE   LBB0_26
	LONG $0x260c8d4e             // lea    r9, [rsi + r12]
	LONG $0x20f88349             // cmp    r8, 32
	JB   LBB0_8
	LONG $0x161c8d48             // lea    rbx, [rsi + rdx]
	WORD $0x3948; BYTE $0xdf     // cmp    rdi, rbx
	JAE  LBB0_12
	LONG $0x071c8d4a             // lea    rbx, [rdi + r8]
	WORD $0x3949; BYTE $0xd9     // cmp    r9, rbx
	JAE  LBB0_12

LBB0_8:
	WORD $0x3145; BYTE $0xd2 // xor    r10d, r10d

LBB0_20:
	WORD $0xd389             // mov    ebx, edx
	WORD $0x2944; BYTE $0xe3 // sub    ebx, r12d
	WORD $0xff48; BYTE $0xca // dec    rdx
	WORD $0x294c; BYTE $0xd2 // sub    rdx, r10
	WORD $0x294c; BYTE $0xe2 // sub    rdx, r12
	LONG $0x03e38348         // and    rbx, 3
	JE   LBB0_23
	WORD $0xf748; BYTE $0xdb // neg    rbx

LBB0_22:
	LONG $0x04b60f43; BYTE $0x11 // movzx    eax, byte [r9 + r10]
	LONG $0x17048842             // mov    byte [rdi + r10], al
	WORD $0xff49; BYTE $0xc2     // inc    r10
	WORD $0xff48; BYTE $0xc3     // inc    rbx
	JNE  LBB0_22

LBB0_23:
	LONG $0x03fa8348             // cmp    rdx, 3
	JB   LBB0_26
	WORD $0x294d; BYTE $0xd0     // sub    r8, r10
	LONG $0x17548d4a; BYTE $0x03 // lea    rdx, [rdi + r10 + 3]
	WORD $0x014d; BYTE $0xd4     // add    r12, r10
	LONG $0x26448d4a; BYTE $0x03 // lea    rax, [rsi + r12 + 3]
	WORD $0xf631                 // xor    esi, esi

LBB0_25:
	LONG $0x305cb60f; BYTE $0xfd // movzx    ebx, byte [rax + rsi - 3]
	LONG $0xfd325c88             // mov    byte [rdx + rsi - 3], bl
	LONG $0x305cb60f; BYTE $0xfe // movzx    ebx, byte [rax + rsi - 2]
	LONG $0xfe325c88             // mov    byte [rdx + rsi - 2], bl
	LONG $0x305cb60f; BYTE $0xff // movzx    ebx, byte [rax + rsi - 1]
	LONG $0xff325c88             // mov    byte [rdx + rsi - 1], bl
	LONG $0x301cb60f             // movzx    ebx, byte [rax + rsi]
	WORD $0x1c88; BYTE $0x32     // mov    byte [rdx + rsi], bl
	LONG $0x04c68348             // add    rsi, 4
	WORD $0x3949; BYTE $0xf0     // cmp    r8, rsi
	JNE  LBB0_25
	JMP  LBB0_26

LBB0_12:
	WORD $0x894d; BYTE $0xc2                   // mov    r10, r8
	LONG $0xe0e28349                           // and    r10, -32
	LONG $0xe0728d4d                           // lea    r14, [r10 - 32]
	WORD $0x894c; BYTE $0xf3                   // mov    rbx, r14
	LONG $0x05ebc148                           // shr    rbx, 5
	LONG $0x015b8d44                           // lea    r11d, [rbx + 1]
	LONG $0x07e38341                           // and    r11d, 7
	LONG $0xe0fe8149; WORD $0x0000; BYTE $0x00 // cmp    r14, 224
	JAE  LBB0_14
	WORD $0xdb31                               // xor    ebx, ebx
	WORD $0x854d; BYTE $0xdb                   // test    r11, r11
	JNE  LBB0_17
	JMP  LBB0_19

LBB0_14:
	QUAD $0x000000e026b48d4e // lea    r14, [rsi + r12 + 224]
	LONG $0xff7b8d4d         // lea    r15, [r11 - 1]
	WORD $0x2949; BYTE $0xdf // sub    r15, rbx
	WORD $0xdb31             // xor    ebx, ebx

LBB0_15:
	QUAD $0xff201ea4107cc1c4; WORD $0xffff     // vmovups    ymm4, yword [r14 + rbx - 224]
	LONG $0x2411fcc5; BYTE $0x1f               // vmovups    yword [rdi + rbx], ymm4
	QUAD $0xff401ea4107cc1c4; WORD $0xffff     // vmovups    ymm4, yword [r14 + rbx - 192]
	LONG $0x6411fcc5; WORD $0x201f             // vmovups    yword [rdi + rbx + 32], ymm4
	QUAD $0xff601ea4107cc1c4; WORD $0xffff     // vmovups    ymm4, yword [r14 + rbx - 160]
	LONG $0x6411fcc5; WORD $0x401f             // vmovups    yword [rdi + rbx + 64], ymm4
	LONG $0x107cc1c4; WORD $0x1e64; BYTE $0x80 // vmovups    ymm4, yword [r14 + rbx - 128]
	LONG $0x6411fcc5; WORD $0x601f             // vmovups    yword [rdi + rbx + 96], ymm4
	LONG $0x107cc1c4; WORD $0x1e64; BYTE $0xa0 // vmovups    ymm4, yword [r14 + rbx - 96]
	QUAD $0x0000801fa411fcc5; BYTE $0x00       // vmovups    yword [rdi + rbx + 128], ymm4
	LONG $0x107cc1c4; WORD $0x1e64; BYTE $0xc0 // vmovups    ymm4, yword [r14 + rbx - 64]
	QUAD $0x0000a01fa411fcc5; BYTE $0x00       // vmovups    yword [rdi + rbx + 160], ymm4
	LONG $0x107cc1c4; WORD $0x1e64; BYTE $0xe0 // vmovups    ymm4, yword [r14 + rbx - 32]
	QUAD $0x0000c01fa411fcc5; BYTE $0x00       // vmovups    yword [rdi + rbx + 192], ymm4
	LONG $0x6f7ec1c4; WORD $0x1e24             // vmovdqu    ymm4, yword [r14 + rbx]
	QUAD $0x0000e01fa47ffec5; BYTE $0x00       // vmovdqu    yword [rdi + rbx + 224], ymm4
	LONG $0x00c38148; WORD $0x0001; BYTE $0x00 // add    rbx, 256
	LONG $0x08c78349                           // add    r15, 8
	JNE  LBB0_15
	WORD $0x854d; BYTE $0xdb                   // test    r11, r11
	JE   LBB0_19

LBB0_17:
	WORD $0xf749; BYTE $0xdb // neg    r11

LBB0_18:
	LONG $0x6f7ec1c4; WORD $0x1924 // vmovdqu    ymm4, yword [r9 + rbx]
	LONG $0x247ffec5; BYTE $0x1f   // vmovdqu    yword [rdi + rbx], ymm4
	LONG $0x20c38348               // add    rbx, 32
	WORD $0xff49; BYTE $0xc3       // inc    r11
	JNE  LBB0_18

LBB0_19:
	WORD $0x394d; BYTE $0xd0 // cmp    r8, r10
	JNE  LBB0_20

LBB0_26:
	LONG $0x276ffec5               // vmovdqu    ymm4, yword [rdi]
	LONG $0xd471d5c5; BYTE $0x04   // vpsrlw    ymm5, ymm4, 4
	LONG $0x597de2c4; WORD $0x0075 // vpbroadcastq    ymm6, qword 0[rbp] /* [rip + LCPI0_0] */
	LONG $0xeedbd5c5               // vpand    ymm5, ymm5, ymm6
	LONG $0x756ffdc5; BYTE $0x20   // vmovdqa    ymm6, yword 32[rbp] /* [rip + LCPI0_1] */
	LONG $0xfed8ddc5               // vpsubusb    ymm7, ymm4, ymm6
	LONG $0xdfebe5c5               // vpor    ymm3, ymm3, ymm7
	LONG $0x7d6ffdc5; BYTE $0x40   // vmovdqa    ymm7, yword 64[rbp] /* [rip + LCPI0_2] */
	LONG $0x0045e2c4; BYTE $0xfd   // vpshufb    ymm7, ymm7, ymm5
	LONG $0x466d63c4; WORD $0x21c7 // vperm2i128    ymm8, ymm2, ymm7, 33
	LONG $0x0f4543c4; WORD $0x0fc0 // vpalignr    ymm8, ymm7, ymm8, 15
	LONG $0x4d6f7dc5; BYTE $0x60   // vmovdqa    ymm9, yword 96[rbp] /* [rip + LCPI0_3] */
	LONG $0xd83d41c4; BYTE $0xc1   // vpsubusb    ymm8, ymm8, ymm9
	LONG $0xc7fc3dc5               // vpaddb    ymm8, ymm8, ymm7
	LONG $0x466dc3c4; WORD $0x21d0 // vperm2i128    ymm2, ymm2, ymm8, 33
	LONG $0x0f3de3c4; WORD $0x0ed2 // vpalignr    ymm2, ymm8, ymm2, 14
	QUAD $0x0000008095d8edc5       // vpsubusb    ymm2, ymm2, yword 128[rbp] /* [rip + LCPI0_4] */
	LONG $0xfc6dc1c4; BYTE $0xd0   // vpaddb    ymm2, ymm2, ymm8
	LONG $0xd764edc5               // vpcmpgtb    ymm2, ymm2, ymm7
	LONG $0xff64b5c5               // vpcmpgtb    ymm7, ymm9, ymm7
	LONG $0xd7efedc5               // vpxor    ymm2, ymm2, ymm7
	LONG $0x4675e3c4; WORD $0x21cc // vperm2i128    ymm1, ymm1, ymm4, 33
	LONG $0x0f5de3c4; WORD $0x0fc9 // vpalignr    ymm1, ymm4, ymm1, 15
	QUAD $0x000000a0bd74f5c5       // vpcmpeqb    ymm7, ymm1, yword 160[rbp] /* [rip + LCPI0_5] */
	LONG $0xf674f5c5               // vpcmpeqb    ymm6, ymm1, ymm6
	QUAD $0x000000c085645dc5       // vpcmpgtb    ymm8, ymm4, yword 192[rbp] /* [rip + LCPI0_6] */
	LONG $0xdb45c1c4; BYTE $0xf8   // vpand    ymm7, ymm7, ymm8
	QUAD $0x000000e085645dc5       // vpcmpgtb    ymm8, ymm4, yword 224[rbp] /* [rip + LCPI0_7] */
	LONG $0xdb4dc1c4; BYTE $0xf0   // vpand    ymm6, ymm6, ymm8
	LONG $0xf7ebcdc5               // vpor    ymm6, ymm6, ymm7
	LONG $0xdeebe5c5               // vpor    ymm3, ymm3, ymm6
	LONG $0x467de3c4; WORD $0x21c5 // vperm2i128    ymm0, ymm0, ymm5, 33
	LONG $0x0f55e3c4; WORD $0x0fc0 // vpalignr    ymm0, ymm5, ymm0, 15
	QUAD $0x00000100ad6ffdc5       // vmovdqa    ymm5, yword 256[rbp] /* [rip + LCPI0_8] */
	LONG $0x0055e2c4; BYTE $0xe8   // vpshufb    ymm5, ymm5, ymm0
	LONG $0xc964d5c5               // vpcmpgtb    ymm1, ymm5, ymm1
	QUAD $0x00000120ad6ffdc5       // vmovdqa    ymm5, yword 288[rbp] /* [rip + LCPI0_9] */
	LONG $0x0055e2c4; BYTE $0xc0   // vpshufb    ymm0, ymm5, ymm0
	LONG $0xc464fdc5               // vpcmpgtb    ymm0, ymm0, ymm4
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0xc0ebe5c5               // vpor    ymm0, ymm3, ymm0
	LONG $0xc0ebedc5               // vpor    ymm0, ymm2, ymm0

LBB0_27:
	WORD $0xc031                 // xor    eax, eax
	LONG $0x177de2c4; BYTE $0xc0 // vptest    ymm0, ymm0
	WORD $0x940f; BYTE $0xd0     // sete    al
	WORD $0x8948; BYTE $0x01     // mov    qword [rcx], rax
	VZEROUPPER
	RET
