//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

TEXT ·__SumFloat64(SB), $0-24

	MOVQ buf+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ res+16(FP), DX

	LONG $0x03c6f640         // test    sil, 3
	JNE  LBB0_9
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB0_2
	LONG $0xff468d4c         // lea    r8, [rsi - 1]
	WORD $0x8944; BYTE $0xc1 // mov    ecx, r8d
	WORD $0xe9c1; BYTE $0x02 // shr    ecx, 2
	WORD $0xc183; BYTE $0x01 // add    ecx, 1
	LONG $0x07e18348         // and    rcx, 7
	JE   LBB0_4
	WORD $0xf748; BYTE $0xd9 // neg    rcx
	LONG $0xc057fdc5         // vxorpd    ymm0, ymm0, ymm0
	WORD $0xc031             // xor    eax, eax

LBB0_6:
	LONG $0x0458fdc5; BYTE $0xc7 // vaddpd    ymm0, ymm0, yword [rdi + 8*rax]
	LONG $0x04c08348             // add    rax, 4
	LONG $0x01c18348             // add    rcx, 1
	JNE  LBB0_6
	JMP  LBB0_7

LBB0_2:
	LONG $0xc057fdc5 // vxorpd    ymm0, ymm0, ymm0
	JMP  LBB0_8

LBB0_4:
	WORD $0xc031     // xor    eax, eax
	LONG $0xc057fdc5 // vxorpd    ymm0, ymm0, ymm0

LBB0_7:
	LONG $0x1cf88349 // cmp    r8, 28
	JB   LBB0_8

LBB0_10:
	LONG $0x0458fdc5; BYTE $0xc7         // vaddpd    ymm0, ymm0, yword [rdi + 8*rax]
	LONG $0x4458fdc5; WORD $0x20c7       // vaddpd    ymm0, ymm0, yword [rdi + 8*rax + 32]
	LONG $0x4458fdc5; WORD $0x40c7       // vaddpd    ymm0, ymm0, yword [rdi + 8*rax + 64]
	LONG $0x4458fdc5; WORD $0x60c7       // vaddpd    ymm0, ymm0, yword [rdi + 8*rax + 96]
	QUAD $0x000080c78458fdc5; BYTE $0x00 // vaddpd    ymm0, ymm0, yword [rdi + 8*rax + 128]
	QUAD $0x0000a0c78458fdc5; BYTE $0x00 // vaddpd    ymm0, ymm0, yword [rdi + 8*rax + 160]
	QUAD $0x0000c0c78458fdc5; BYTE $0x00 // vaddpd    ymm0, ymm0, yword [rdi + 8*rax + 192]
	QUAD $0x0000e0c78458fdc5; BYTE $0x00 // vaddpd    ymm0, ymm0, yword [rdi + 8*rax + 224]
	LONG $0x20c08348                     // add    rax, 32
	WORD $0x3948; BYTE $0xf0             // cmp    rax, rsi
	JB   LBB0_10

LBB0_8:
	LONG $0xc07cfdc5               // vhaddpd    ymm0, ymm0, ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc158fbc5               // vaddsd    xmm0, xmm0, xmm1
	LONG $0x0211fbc5               // vmovsd    qword [rdx], xmm0

LBB0_9:
	VZEROUPPER
	RET

TEXT ·__SumFloat64b(SB), $0-24

	MOVQ buf+0(FP), DI
	MOVQ len+8(FP), SI
	MOVQ res+16(FP), DX

	LONG $0xc057f9c5         // vxorpd    xmm0, xmm0, xmm0
	WORD $0x8548; BYTE $0xf6 // test    rsi, rsi
	JE   LBB1_14
	LONG $0x0ffe8348         // cmp    rsi, 15
	JBE  LBB1_2
	WORD $0x8949; BYTE $0xf1 // mov    r9, rsi
	LONG $0xf0e18349         // and    r9, -16
	JE   LBB1_2
	LONG $0xf0418d4d         // lea    r8, [r9 - 16]
	WORD $0x8944; BYTE $0xc0 // mov    eax, r8d
	WORD $0xe8c1; BYTE $0x04 // shr    eax, 4
	WORD $0xc083; BYTE $0x01 // add    eax, 1
	LONG $0x03e08348         // and    rax, 3
	JE   LBB1_7
	WORD $0xf748; BYTE $0xd8 // neg    rax
	LONG $0xc057fdc5         // vxorpd    ymm0, ymm0, ymm0
	WORD $0xc931             // xor    ecx, ecx
	LONG $0xc957f5c5         // vxorpd    ymm1, ymm1, ymm1
	LONG $0xd257edc5         // vxorpd    ymm2, ymm2, ymm2
	LONG $0xdb57e5c5         // vxorpd    ymm3, ymm3, ymm3

LBB1_9:
	LONG $0x0458fdc5; BYTE $0xcf   // vaddpd    ymm0, ymm0, yword [rdi + 8*rcx]
	LONG $0x4c58f5c5; WORD $0x20cf // vaddpd    ymm1, ymm1, yword [rdi + 8*rcx + 32]
	LONG $0x5458edc5; WORD $0x40cf // vaddpd    ymm2, ymm2, yword [rdi + 8*rcx + 64]
	LONG $0x5c58e5c5; WORD $0x60cf // vaddpd    ymm3, ymm3, yword [rdi + 8*rcx + 96]
	LONG $0x10c18348               // add    rcx, 16
	LONG $0x01c08348               // add    rax, 1
	JNE  LBB1_9
	JMP  LBB1_10

LBB1_2:
	WORD $0x3145; BYTE $0xc9 // xor    r9d, r9d

LBB1_3:
	LONG $0xcf048d4a         // lea    rax, [rdi + 8*r9]
	WORD $0x294c; BYTE $0xce // sub    rsi, r9

LBB1_4:
	LONG $0x0058fbc5 // vaddsd    xmm0, xmm0, qword [rax]
	LONG $0x08c08348 // add    rax, 8
	LONG $0xffc68348 // add    rsi, -1
	JNE  LBB1_4

LBB1_14:
	LONG $0x0211fbc5 // vmovsd    qword [rdx], xmm0
	VZEROUPPER
	RET

LBB1_7:
	WORD $0xc931     // xor    ecx, ecx
	LONG $0xc057fdc5 // vxorpd    ymm0, ymm0, ymm0
	LONG $0xc957f5c5 // vxorpd    ymm1, ymm1, ymm1
	LONG $0xd257edc5 // vxorpd    ymm2, ymm2, ymm2
	LONG $0xdb57e5c5 // vxorpd    ymm3, ymm3, ymm3

LBB1_10:
	LONG $0x30f88349         // cmp    r8, 48
	JB   LBB1_13
	WORD $0x894c; BYTE $0xc8 // mov    rax, r9
	WORD $0x2948; BYTE $0xc8 // sub    rax, rcx
	QUAD $0x000001e0cf8c8d48 // lea    rcx, [rdi + 8*rcx + 480]

LBB1_12:
	QUAD $0xfffffe208158fdc5                   // vaddpd    ymm0, ymm0, yword [rcx - 480]
	QUAD $0xfffffe408958f5c5                   // vaddpd    ymm1, ymm1, yword [rcx - 448]
	QUAD $0xfffffe609158edc5                   // vaddpd    ymm2, ymm2, yword [rcx - 416]
	QUAD $0xfffffe809958e5c5                   // vaddpd    ymm3, ymm3, yword [rcx - 384]
	QUAD $0xfffffea08158fdc5                   // vaddpd    ymm0, ymm0, yword [rcx - 352]
	QUAD $0xfffffec08958f5c5                   // vaddpd    ymm1, ymm1, yword [rcx - 320]
	QUAD $0xfffffee09158edc5                   // vaddpd    ymm2, ymm2, yword [rcx - 288]
	QUAD $0xffffff009958e5c5                   // vaddpd    ymm3, ymm3, yword [rcx - 256]
	QUAD $0xffffff208158fdc5                   // vaddpd    ymm0, ymm0, yword [rcx - 224]
	QUAD $0xffffff408958f5c5                   // vaddpd    ymm1, ymm1, yword [rcx - 192]
	QUAD $0xffffff609158edc5                   // vaddpd    ymm2, ymm2, yword [rcx - 160]
	LONG $0x5958e5c5; BYTE $0x80               // vaddpd    ymm3, ymm3, yword [rcx - 128]
	LONG $0x4158fdc5; BYTE $0xa0               // vaddpd    ymm0, ymm0, yword [rcx - 96]
	LONG $0x4958f5c5; BYTE $0xc0               // vaddpd    ymm1, ymm1, yword [rcx - 64]
	LONG $0x5158edc5; BYTE $0xe0               // vaddpd    ymm2, ymm2, yword [rcx - 32]
	LONG $0x1958e5c5                           // vaddpd    ymm3, ymm3, yword [rcx]
	LONG $0x00c18148; WORD $0x0002; BYTE $0x00 // add    rcx, 512
	LONG $0xc0c08348                           // add    rax, -64
	JNE  LBB1_12

LBB1_13:
	LONG $0xc058f5c5               // vaddpd    ymm0, ymm1, ymm0
	LONG $0xc058edc5               // vaddpd    ymm0, ymm2, ymm0
	LONG $0xc058e5c5               // vaddpd    ymm0, ymm3, ymm0
	LONG $0x197de3c4; WORD $0x01c1 // vextractf128    xmm1, ymm0, 1
	LONG $0xc158fdc5               // vaddpd    ymm0, ymm0, ymm1
	LONG $0xc07cfdc5               // vhaddpd    ymm0, ymm0, ymm0
	WORD $0x3949; BYTE $0xf1       // cmp    r9, rsi
	JNE  LBB1_3
	JMP  LBB1_14
